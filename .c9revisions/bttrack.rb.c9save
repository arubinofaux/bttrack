{"ts":1368130485911,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"require 'sinatra'\n\n$BTTRACK_ROOT = File.dirname(File.expand_path(__FILE__))\n$LOAD_PATH << \"#{$BTTRACK_ROOT}/lib\"\n\nrequire 'bttrack/config'\nrequire 'bttrack/request'\nrequire 'config/config' if File.exists?(\"#{$BTTRACK_ROOT}/config/config.rb\")\n\nhelpers do\n  def req\n    Bttrack::Request.new(params.merge(\n      :remote_ip => request.ip\n    ))\n  end\nend\n\nerror do\n  request.env['sinatra.error'].message\nend\n\nget '/' do\n  @version = `cat #{$BTTRACK_ROOT}/VERSION`\n  @torrents_count = Dir.glob(\"#{CONF[:db_dir]}/*/*/*\").size\n  erb :index\nend\n\nget '/announce' do\n  info_hash = req.info_hash\n  \n  peers = info_hash.peers(\n    :compact => req.compact?,\n    :no_peer_id => req.no_peer_id?,\n    :numwant => req.numwant\n  )\n  \n  info_hash.event(\n    :event => req.event,\n    :downloaded => req.downloaded,\n    :uploaded => req.uploaded,\n    :left => req.left,\n    :peer => req.peer\n  )\n\n  peers.bencode\nend\n\nget '/scrape' do\n  (request[:info_hash].nil? ? \n    Bttrack::InfoHash.scrape :\n    req.info_hash.scrape).bencode\nend\n\n__END__\n@@ layout\n<html>\n  <body>\n   <%= yield %>\n  </body>\n</html>\n\n@@ index\nbttrack version <%= @version %><br/>\ntracking <%= @torrents_count %> torrent(s)\n"]],"start1":0,"start2":0,"length1":0,"length2":1173}]],"length":1173}
{"contributors":[],"silentsave":false,"ts":1368130605180,"patch":[[{"diffs":[[0,"@ index\n"],[-1,"bttrack"],[1,"panda"],[0," version"]],"start1":1085,"start2":1085,"length1":23,"length2":21}]],"length":1171,"saved":false}
